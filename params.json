{
  "name": "Moip-net",
  "tagline": "Biblioteca de acesso às APIs do moip",
  "body": "# Moip.Net\r\n\r\nMoip.Net é uma biblioteca para utilizar as funções da API do Moip.\r\n\r\nATENÇÃO! A implementação da V1 da API não será considerada neste componente, uma vez que a V2 já está em ambiente de produção.\r\n\r\nEstão implementadas as bibliotecas de Assinatura e Pagamento V2.\r\n\r\n## Instalação\r\n\r\nMoip.Net está disponível como um [NuGet Package](https://www.nuget.org/packages/moip-net/). Esta é a melhor forma de instalar a biblioteca no seu projeto.\r\n\r\n### Visual Studio\r\n\r\n\tClick on *Tools -> NuGet Package Manager -> Package Manager Console* and enter the following\r\n\r\n\tPM> Install-Package moip-net\r\n\r\n## Pagamentos v2\r\n\r\n### Como usar\r\n\r\nA biblioteca irá chamar a API do moip. Veja na [Documentação do moip](http://dev.moip.com.br/referencia-api/) os parâmetros que devem ser enviadas a cada chamada.\r\n\r\nNos exemplos escritos, estamos assumindo que há os seguintes usings\r\n\r\n```cs\r\nusing Moip.Net.V2;\r\nusing Moip.Net.V2.Model;\r\n```\r\n\r\n### Exemplos\r\n\r\nTodas as funções de pagamento são chamadas através de uma instância da classe V2Client.\r\nPara criar uma instância, você deve informar o ambiente (produção ou sandbox), sua API_Key e seu Token.\r\n\r\n#### Criando um pedido com um novo cliente\r\n\r\nVeja a documentação aqui: [Criar pedido](http://dev.moip.com.br/referencia-api/#criar-pedido-post)\r\n\r\n```cs\r\n\r\nvar v2Client =  new V2Client(\r\n\tnew Uri(\"https://sandbox.moip.com.br/\"), \r\n\t\"API_TOKEN\",\r\n\t\"API_KEY\"\r\n);\r\n\r\nvar pedido = new Pedido()\r\n{\r\n\tOwnId = \"SEU_CODIGO_PEDIDO\",\r\n\tAmount = new Valores()\r\n\t{\r\n\t\tCurrency = CurrencyType.BRL,\r\n\t\tSubtotals = new Subtotal()\r\n\t\t{\r\n\t\t\tShipping = 1000\r\n\t\t}\r\n\t},\r\n\tItems = new List<ItemPedido>()\r\n\t{\r\n\t\tnew ItemPedido()\r\n\t\t{\r\n\t\t\tProduct = \"Descrição do produto\",\r\n\t\t\tQuantity = 1,\r\n\t\t\tDetail = \"Detalhes\",\r\n\t\t\tPrice = 1000\r\n\t\t}\r\n\t},\r\n\tCustomer = new Cliente()\r\n\t{\r\n\t\tOwnId = \"SEU_ID_CLIENTE\",\r\n\t\tFullname = \"José Silva\",\r\n\t\tEmail = \"josesilva@acme.com.br\",\r\n\t\tBirthDate = DateTime.Now.Date.AddYears(-18).ToString(\"yyyy-MM-dd\"),\r\n\t\tTaxDocument = new Documento()\r\n\t\t{\r\n\t\t\tType = DocumentType.CPF,\r\n\t\t\tNumber = \"65374721054\"\r\n\t\t},\r\n\t\tPhone = new Telefone()\r\n\t\t{\r\n\t\t\tCountryCode = 55,\r\n\t\t\tAreaCode = 11,\r\n\t\t\tNumber = 999999999\r\n\t\t},\r\n\t\tShippingAddress = new Endereco()\r\n\t\t{\r\n\t\t\tZipCode = \"01234000\",\r\n\t\t\tStreet = \"Avenida Faria Lima\",\r\n\t\t\tStreetNumber = \"2927\",\r\n\t\t\tComplement = \"SL 1\",\r\n\t\t\tCity = \"São Paulo\",\r\n\t\t\tDistrict = \"Itaim\",\r\n\t\t\tState = \"SP\",\r\n\t\t\tCountry = \"BRA\"\r\n\t\t}\r\n\t};\r\n};\r\n\r\nvar clienteCriado = v2Client.CriarPedido(pedido);\r\n```\r\n#### Listando os pedidos com filters\r\nVeja a documentação aqui: [Listar todos pedidos](http://dev.moip.com.br/referencia-api/#listar-todos-pedidos-get)\r\n\r\n```cs\r\n\r\nvar v2Client =  new V2Client(\r\n\tnew Uri(\"https://sandbox.moip.com.br/\"), \r\n\t\"API_TOKEN\",\r\n\t\"API_KEY\"\r\n);\r\n\r\n//Listar todos os pedidos pagos e criados com data superior a 01/01/2016\r\nvar filters = new Filters()\r\n\t.Add(new GreatherThanFilter<DateTime>(\"createdAt\", new DateTime(2016, 01, 01)))\r\n\t.Add(new InFilter<OrderStatusType>(\"status\", OrderStatusType.CREATED, OrderStatusType.PAID));\r\n\r\nvar pedidos = v2Client.ListarTodosPedidos(filters: filters);\r\n```\r\n#### Tratamento de erro\r\nTodas as exceções geradas durante a chamada da API serão retornadas como uma MoipException.\r\n[Abordagem restful do moip](http://dev.moip.com.br/referencia-api/#abordagem-restful)\r\n\t\t\t\r\n\r\n```cs\r\n\r\ntry\r\n{\r\n\tvar v2Client =  new V2Client(\r\n\t\tnew Uri(\"https://sandbox.moip.com.br/\"), \r\n\t\t\"API_TOKEN\",\r\n\t\t\"API_KEY\"\r\n\t);\r\n\r\n\tvar cliente = new Cliente();\r\n\tv2Client.CriarCliente(cliente);\r\n}\r\ncatch (MoipException ex)\r\n{\r\n\t//ex.Message = Mensagem de retorno + descrição de todos os erros retornados do moip com quebra de linha\r\n\t//ex.ResponseError.Errors = Coleção de [Codigo, Path e Description]\r\n}\r\n\r\n```\r\n\r\n### O que está implementado\r\n\r\nEste componente não faz ABSOLUTAMENTE nenhuma validação de dados. Tudo isto fica a cargo da própria API.\r\nPara verificar os parâmetros obrigatórios e especificidades de cada chamada, verifique a [documentação](http://dev.moip.com.br/referencia-api/).\r\n\r\n* Clientes\r\n\t* CriarCliente\r\n\t* ConsultarCliente\r\n\t* AdicionarCartaoCliente\r\n* Pedidos\r\n\t* CriarPedido\r\n\t* ConsultarPedido\r\n\t* ListarTodosPedidos\r\n* Pagamentos\r\n\t* CriarPagamento\r\n\t* ConsultarPagamento\r\n\t* CapturarPagamentoPreAutorizado\r\n\t* CancelarPagamentoPreAutorizado\r\n\r\nNÃO IMPLEMENTADOS\r\n* Reembolsos\r\n* Multipedidos\r\n* Multipagamentos\r\n* Permissões de terceiros\r\n* Contas Moip\r\n* Contas Bancárias\r\n* Transferências\r\n* Conciliação Financeira\r\n\r\n## Assinaturas\r\n\r\nTodas as funções de assinatura são chamadas através de uma instância da classe AssinaturasClient.\r\nPara criar uma instância, você deve informar o ambiente (dev ou sandbox), sua API_Key e seu Token.\r\n\r\n```cs\r\nvar assinaturasClient = \r\n\tnew AssinaturasClient(\r\n\t\tnew Uri(\"https://sandbox.moip.com.br/\"), \r\n\t\t\"API_TOKEN\",\r\n\t\t\"API_KEY\");\r\n```\r\n\r\n#### Criando uma Assinatura com um novo cliente\r\n\r\nhttp://dev.moip.com.br/assinaturas-api/#criar-assinaturas-post\r\n\r\n```cs\r\n\r\nvar subscription = new Subscription()\r\n{\r\n    Code = \"_test_assinatura_\" + DateTime.Now.Ticks,\r\n    PaymentMethod = Plan.PaymentMethodPlan.CREDIT_CARD,\r\n    Plan = firstPlan,\r\n    Customer = new CustomerRequest()\r\n\t{\r\n\t\tCode = \"CodigoCliente,\r\n\t\tEmail = \"rogerr@acme.com\",\r\n\t\tFullname = \"Roger Rabbit\",\r\n\t\tCpf = \"72716422699\",\r\n\t\tPhoneAreaCode = 11,\r\n\t\tPhoneNumber = \"555555555\",\r\n\t\tBirthdateDay = 19,\r\n\t\tBirthdateMonth = 7,\r\n\t\tBirthdateYear = 1985,\r\n\t\tAddress = new CustomerAddress()\r\n\t\t{\r\n\t\t\tStreet = \"Rua Nome da Rua\",\r\n\t\t\tNumber = \"100\",\r\n\t\t\tComplement = \"AP 51\",\r\n\t\t\tDistrict = \"Nossa Senhora do Ó\",\r\n\t\t\tCity = \"São Paulo\",\r\n\t\t\tState = \"SP\",\r\n\t\t\tCountry = \"BRA\",\r\n\t\t\tZipcode = \"02927100\"\r\n\t\t},\r\n\t\tBillingInfo = new BillingInfoRequest()\r\n\t\t{\r\n\t\t\tCreditCard = new CreditCard()\r\n\t\t\t{\r\n\t\t\t\tHolderName = \"Roger Rabbit\",\r\n\t\t\t\tNumber = \"4111111111111111\",\r\n\t\t\t\tExpirationMonth = \"04\",\r\n\t\t\t\tExpirationYear = \"30\"\r\n\t\t\t}\r\n\t\t}\r\n};\r\n\r\nassinaturasClient.CreateSubscription(subscription, true);\r\n\r\n```\r\n\r\n## Observações\r\n\r\n- As outras funções seguem a mesma linha e a biblioteca possui documentação dos parâmetros (mas sempre é bom consultar a documentação oficial)\r\n- Sobre os nomes das propriedades em inglês e funções em portugês, tentei seguir ao máximo a descrição da documentação oficial do moip, para facilitar o uso.\r\n- Os testes unitários estão passando 100%, com 90% de code coverage :)\r\n- Qualquer dúvida ou sugestão, crie seu issue ou [entre em contato](mailto:rafagoncalves+moipnet@gmail.com)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}